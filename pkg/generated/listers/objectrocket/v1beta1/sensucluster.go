/*
Copyright 2024 The sensu-operator Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	objectrocketv1beta1 "github.com/objectrocket/sensu-operator/pkg/apis/objectrocket/v1beta1"
	labels "k8s.io/apimachinery/pkg/labels"
	listers "k8s.io/client-go/listers"
	cache "k8s.io/client-go/tools/cache"
)

// SensuClusterLister helps list SensuClusters.
// All objects returned here must be treated as read-only.
type SensuClusterLister interface {
	// List lists all SensuClusters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*objectrocketv1beta1.SensuCluster, err error)
	// SensuClusters returns an object that can list and get SensuClusters.
	SensuClusters(namespace string) SensuClusterNamespaceLister
	SensuClusterListerExpansion
}

// sensuClusterLister implements the SensuClusterLister interface.
type sensuClusterLister struct {
	listers.ResourceIndexer[*objectrocketv1beta1.SensuCluster]
}

// NewSensuClusterLister returns a new SensuClusterLister.
func NewSensuClusterLister(indexer cache.Indexer) SensuClusterLister {
	return &sensuClusterLister{listers.New[*objectrocketv1beta1.SensuCluster](indexer, objectrocketv1beta1.Resource("sensucluster"))}
}

// SensuClusters returns an object that can list and get SensuClusters.
func (s *sensuClusterLister) SensuClusters(namespace string) SensuClusterNamespaceLister {
	return sensuClusterNamespaceLister{listers.NewNamespaced[*objectrocketv1beta1.SensuCluster](s.ResourceIndexer, namespace)}
}

// SensuClusterNamespaceLister helps list and get SensuClusters.
// All objects returned here must be treated as read-only.
type SensuClusterNamespaceLister interface {
	// List lists all SensuClusters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*objectrocketv1beta1.SensuCluster, err error)
	// Get retrieves the SensuCluster from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*objectrocketv1beta1.SensuCluster, error)
	SensuClusterNamespaceListerExpansion
}

// sensuClusterNamespaceLister implements the SensuClusterNamespaceLister
// interface.
type sensuClusterNamespaceLister struct {
	listers.ResourceIndexer[*objectrocketv1beta1.SensuCluster]
}
