/*
Copyright 2019 The sensu-operator Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/objectrocket/sensu-operator/pkg/apis/objectrocket/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SensuCheckConfigLister helps list SensuCheckConfigs.
type SensuCheckConfigLister interface {
	// List lists all SensuCheckConfigs in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.SensuCheckConfig, err error)
	// SensuCheckConfigs returns an object that can list and get SensuCheckConfigs.
	SensuCheckConfigs(namespace string) SensuCheckConfigNamespaceLister
	SensuCheckConfigListerExpansion
}

// sensuCheckConfigLister implements the SensuCheckConfigLister interface.
type sensuCheckConfigLister struct {
	indexer cache.Indexer
}

// NewSensuCheckConfigLister returns a new SensuCheckConfigLister.
func NewSensuCheckConfigLister(indexer cache.Indexer) SensuCheckConfigLister {
	return &sensuCheckConfigLister{indexer: indexer}
}

// List lists all SensuCheckConfigs in the indexer.
func (s *sensuCheckConfigLister) List(selector labels.Selector) (ret []*v1beta1.SensuCheckConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.SensuCheckConfig))
	})
	return ret, err
}

// SensuCheckConfigs returns an object that can list and get SensuCheckConfigs.
func (s *sensuCheckConfigLister) SensuCheckConfigs(namespace string) SensuCheckConfigNamespaceLister {
	return sensuCheckConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SensuCheckConfigNamespaceLister helps list and get SensuCheckConfigs.
type SensuCheckConfigNamespaceLister interface {
	// List lists all SensuCheckConfigs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.SensuCheckConfig, err error)
	// Get retrieves the SensuCheckConfig from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.SensuCheckConfig, error)
	SensuCheckConfigNamespaceListerExpansion
}

// sensuCheckConfigNamespaceLister implements the SensuCheckConfigNamespaceLister
// interface.
type sensuCheckConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SensuCheckConfigs in the indexer for a given namespace.
func (s sensuCheckConfigNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.SensuCheckConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.SensuCheckConfig))
	})
	return ret, err
}

// Get retrieves the SensuCheckConfig from the indexer for a given namespace and name.
func (s sensuCheckConfigNamespaceLister) Get(name string) (*v1beta1.SensuCheckConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("sensucheckconfig"), name)
	}
	return obj.(*v1beta1.SensuCheckConfig), nil
}
