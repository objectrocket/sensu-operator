/*
Copyright 2019 The sensu-operator Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/objectrocket/sensu-operator/pkg/apis/objectrocket/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SensuHandlerLister helps list SensuHandlers.
type SensuHandlerLister interface {
	// List lists all SensuHandlers in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.SensuHandler, err error)
	// SensuHandlers returns an object that can list and get SensuHandlers.
	SensuHandlers(namespace string) SensuHandlerNamespaceLister
	SensuHandlerListerExpansion
}

// sensuHandlerLister implements the SensuHandlerLister interface.
type sensuHandlerLister struct {
	indexer cache.Indexer
}

// NewSensuHandlerLister returns a new SensuHandlerLister.
func NewSensuHandlerLister(indexer cache.Indexer) SensuHandlerLister {
	return &sensuHandlerLister{indexer: indexer}
}

// List lists all SensuHandlers in the indexer.
func (s *sensuHandlerLister) List(selector labels.Selector) (ret []*v1beta1.SensuHandler, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.SensuHandler))
	})
	return ret, err
}

// SensuHandlers returns an object that can list and get SensuHandlers.
func (s *sensuHandlerLister) SensuHandlers(namespace string) SensuHandlerNamespaceLister {
	return sensuHandlerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SensuHandlerNamespaceLister helps list and get SensuHandlers.
type SensuHandlerNamespaceLister interface {
	// List lists all SensuHandlers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.SensuHandler, err error)
	// Get retrieves the SensuHandler from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.SensuHandler, error)
	SensuHandlerNamespaceListerExpansion
}

// sensuHandlerNamespaceLister implements the SensuHandlerNamespaceLister
// interface.
type sensuHandlerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SensuHandlers in the indexer for a given namespace.
func (s sensuHandlerNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.SensuHandler, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.SensuHandler))
	})
	return ret, err
}

// Get retrieves the SensuHandler from the indexer for a given namespace and name.
func (s sensuHandlerNamespaceLister) Get(name string) (*v1beta1.SensuHandler, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("sensuhandler"), name)
	}
	return obj.(*v1beta1.SensuHandler), nil
}
