/*
Copyright 2024 The sensu-operator Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	objectrocketv1beta1 "github.com/objectrocket/sensu-operator/pkg/apis/objectrocket/v1beta1"
	labels "k8s.io/apimachinery/pkg/labels"
	listers "k8s.io/client-go/listers"
	cache "k8s.io/client-go/tools/cache"
)

// SensuHandlerLister helps list SensuHandlers.
// All objects returned here must be treated as read-only.
type SensuHandlerLister interface {
	// List lists all SensuHandlers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*objectrocketv1beta1.SensuHandler, err error)
	// SensuHandlers returns an object that can list and get SensuHandlers.
	SensuHandlers(namespace string) SensuHandlerNamespaceLister
	SensuHandlerListerExpansion
}

// sensuHandlerLister implements the SensuHandlerLister interface.
type sensuHandlerLister struct {
	listers.ResourceIndexer[*objectrocketv1beta1.SensuHandler]
}

// NewSensuHandlerLister returns a new SensuHandlerLister.
func NewSensuHandlerLister(indexer cache.Indexer) SensuHandlerLister {
	return &sensuHandlerLister{listers.New[*objectrocketv1beta1.SensuHandler](indexer, objectrocketv1beta1.Resource("sensuhandler"))}
}

// SensuHandlers returns an object that can list and get SensuHandlers.
func (s *sensuHandlerLister) SensuHandlers(namespace string) SensuHandlerNamespaceLister {
	return sensuHandlerNamespaceLister{listers.NewNamespaced[*objectrocketv1beta1.SensuHandler](s.ResourceIndexer, namespace)}
}

// SensuHandlerNamespaceLister helps list and get SensuHandlers.
// All objects returned here must be treated as read-only.
type SensuHandlerNamespaceLister interface {
	// List lists all SensuHandlers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*objectrocketv1beta1.SensuHandler, err error)
	// Get retrieves the SensuHandler from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*objectrocketv1beta1.SensuHandler, error)
	SensuHandlerNamespaceListerExpansion
}

// sensuHandlerNamespaceLister implements the SensuHandlerNamespaceLister
// interface.
type sensuHandlerNamespaceLister struct {
	listers.ResourceIndexer[*objectrocketv1beta1.SensuHandler]
}
