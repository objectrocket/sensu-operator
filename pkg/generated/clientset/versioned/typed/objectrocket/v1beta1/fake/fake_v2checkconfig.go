/*
Copyright 2019 The sensu-operator Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1beta1 "github.com/objectrocket/sensu-operator/pkg/apis/objectrocket/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeV2CheckConfigs implements V2CheckConfigInterface
type FakeV2CheckConfigs struct {
	Fake *FakeObjectrocketV1beta1
	ns   string
}

var v2checkconfigsResource = schema.GroupVersionResource{Group: "objectrocket.com", Version: "v1beta1", Resource: "v2checkconfigs"}

var v2checkconfigsKind = schema.GroupVersionKind{Group: "objectrocket.com", Version: "v1beta1", Kind: "V2CheckConfig"}

// Get takes name of the v2CheckConfig, and returns the corresponding v2CheckConfig object, and an error if there is any.
func (c *FakeV2CheckConfigs) Get(name string, options v1.GetOptions) (result *v1beta1.V2CheckConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(v2checkconfigsResource, c.ns, name), &v1beta1.V2CheckConfig{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.V2CheckConfig), err
}

// List takes label and field selectors, and returns the list of V2CheckConfigs that match those selectors.
func (c *FakeV2CheckConfigs) List(opts v1.ListOptions) (result *v1beta1.V2CheckConfigList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(v2checkconfigsResource, v2checkconfigsKind, c.ns, opts), &v1beta1.V2CheckConfigList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.V2CheckConfigList), err
}

// Watch returns a watch.Interface that watches the requested v2CheckConfigs.
func (c *FakeV2CheckConfigs) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(v2checkconfigsResource, c.ns, opts))

}

// Create takes the representation of a v2CheckConfig and creates it.  Returns the server's representation of the v2CheckConfig, and an error, if there is any.
func (c *FakeV2CheckConfigs) Create(v2CheckConfig *v1beta1.V2CheckConfig) (result *v1beta1.V2CheckConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(v2checkconfigsResource, c.ns, v2CheckConfig), &v1beta1.V2CheckConfig{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.V2CheckConfig), err
}

// Update takes the representation of a v2CheckConfig and updates it. Returns the server's representation of the v2CheckConfig, and an error, if there is any.
func (c *FakeV2CheckConfigs) Update(v2CheckConfig *v1beta1.V2CheckConfig) (result *v1beta1.V2CheckConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(v2checkconfigsResource, c.ns, v2CheckConfig), &v1beta1.V2CheckConfig{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.V2CheckConfig), err
}

// Delete takes name of the v2CheckConfig and deletes it. Returns an error if one occurs.
func (c *FakeV2CheckConfigs) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(v2checkconfigsResource, c.ns, name), &v1beta1.V2CheckConfig{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeV2CheckConfigs) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(v2checkconfigsResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &v1beta1.V2CheckConfigList{})
	return err
}

// Patch applies the patch and returns the patched v2CheckConfig.
func (c *FakeV2CheckConfigs) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.V2CheckConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(v2checkconfigsResource, c.ns, name, data, subresources...), &v1beta1.V2CheckConfig{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.V2CheckConfig), err
}
