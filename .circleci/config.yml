version: 2
jobs:
  markdownlint:
    docker:
      - image: circleci/node:10.14.2
    steps:
      - checkout
      - run:
          name: install markdownlint
          command: |
            sudo npm install -g markdownlint-cli
            markdownlint --version
      - run:
          name: lint README.md
          command: markdownlint --config .markdownlint.json README.md
  build:
    working_directory: /go/src/github.com/objectrocket/sensu-operator
    docker:
      - image: circleci/golang:1.10
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          key: gopkg-{{ .Branch }}-{{ checksum "Gopkg.lock" }}
          paths:
              - /go/src/github.com/objectrocket/sensu-operator/vendor
      - run:
          name: make dependencies
          command: make dep
      - save_cache:
          key: gopkg-{{ .Branch }}-{{ checksum "Gopkg.lock" }}
          paths:
              - /go/src/github.com/objectrocket/sensu-operator/vendor
      - run:
          name: Build the server binary and docker image
          command: make docker-build          
  e2e_tests:
    machine: true
    working_directory: /go/src/github.com/objectrocket/sensu-operator
    steps:
      - checkout
      - run:
          name: Setup host
          environment:
            K8S_VERSION: v1.10.0
            MINIKUBE_VERSION: v0.28.2
            CHANGE_MINIKUBE_NONE_USER: true
          command: |
            curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/${K8S_VERSION}/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
            curl -Lo minikube https://github.com/kubernetes/minikube/releases/download/${MINIKUBE_VERSION}/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
            curl -Lo mc https://dl.minio.io/client/mc/release/linux-amd64/mc && chmod +x mc && sudo mv mc /usr/local/bin/
            sudo minikube config set WantReportErrorPrompt false
            # Install Go 1.10 to avoid error from `go test`: `can't load package: package github.com/sensu/sensu-operator: no Go files in ...`
            curl -Lo go.tgz https://dl.google.com/go/go1.10.3.linux-amd64.tar.gz
            sudo rm -rf /usr/local/go/*
            sudo tar -C /usr/local/ -xf go.tgz
            # Avoid an error `linux mounts: path /etc/kubernetes is mounted on / but it is not a shared or slave mount`
            sudo mount --make-shared /
            # TODO: remove the --bootstrapper flag once this issue is solved: https://github.com/kubernetes/minikube/issues/2704
            sudo -E minikube start --vm-driver=none --bootstrapper=localkube --memory=3072 --kubernetes-version=${K8S_VERSION} --extra-config=apiserver.Authorization.Mode=RBAC --extra-config=kubelet.PodCIDR=192.168.0.0/16 --extra-config=controller-manager.cluster-cidr=192.168.0.0/16 --extra-config=controller-manager.allocate-node-cidrs=true --network-plugin=cni --extra-config=kubelet.network-plugin=cni
      - run:
          name: Make /run shared mount
          command: |
            # Otherwise calico-node will fail to start with:
            # Error: failed to start container "calico-node": ... path /var/run/calico is mounted on /run but it is not a shared or slave mount
            sudo mount --make-shared /run
      - run:
          name: Install calico plugin
          command: |
            # Install calico according to the instruction here: https://docs.projectcalico.org/v3.1/getting-started/kubernetes/installation/calico
            kubectl apply -f https://docs.projectcalico.org/v3.1/getting-started/kubernetes/installation/rbac.yaml
            kubectl apply -f https://docs.projectcalico.org/v3.1/getting-started/kubernetes/installation/hosted/calico.yaml
      - run:
          name: Wait for kubernetes to be ready
          command: |
            JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'
            until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do
              sleep 1
            done
      - run:
          name: Build operator
          command: |
            make build
            make container IMAGE=sensu/sensu-operator:test
      - run:
          name: Setup RBAC for kube-dns
          command: |
            kubectl create clusterrolebinding cluster-admin:kube-system --clusterrole=cluster-admin --serviceaccount=kube-system:default
      - run:
          name: Setup RBAC for operator
          command: |
            ./example/rbac/create-role
      - run:
          name: Setup S3 environment
          command: |
            ./test/deploy-minio
            until kubectl rollout status deploy minio-deployment; do sleep 1; done
            until nc -z $(minikube ip) 31234; do sleep 1; done
            until mc config host add minio http://$(minikube ip):31234 admin password; do sleep 1; done
            mc mb minio/sensu-backup-test
      - run:
          name: Run e2e tests
          command: |
            export SENSU_API_URL="http://127.0.0.1:31180"
            KUBECONFIG=~/.kube/config \
            OPERATOR_IMAGE=objectrocket/sensu-operator:test \
            TEST_NAMESPACE=default \
            TEST_AWS_SECRET=sensu-backups-aws-secret \
            TEST_S3_BUCKET=sensu-backup-test \
            ./hack/test
  unit_test:
    working_directory: /go/src/github.com/objectrocket/sensu-operator
    docker:
      - image: circleci/golang:1.10
    steps:
      - checkout
      - restore_cache:
          key: gopkg-{{ .Branch }}-{{ checksum "Gopkg.lock" }}
          paths:
              - /go/src/github.com/objectrocket/sensu-operator/vendor
      - run:
          name: make dependencies
          command: make dep
      - save_cache:
          key: gopkg-{{ .Branch }}-{{ checksum "Gopkg.lock" }}
          paths:
              - /go/src/github.com/objectrocket/sensu-operator/vendor
      - run:
          name: go tests
          command: make unittest
  build_deploy:
    working_directory: /go/src/github.com/objectrocket/sensu-operator
    docker:
      - image: circleci/golang:1.10
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: docker login
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker info
      - restore_cache:
          key: gopkg-{{ .Branch }}-{{ checksum "Gopkg.lock" }}
          paths:
              - /go/src/github.com/objectrocket/sensu-operator/vendor
      - run:
          name: Install dep and dependencies
          command: |
            go get github.com/golang/dep/cmd/dep
            make dep
      - save_cache:
          key: gopkg-{{ .Branch }}-{{ checksum "Gopkg.lock" }}
          paths:
              - /go/src/github.com/objectrocket/sensu-operator/vendor
      - run:
          name: docker build and push
          command: |
            make docker-build
            make docker-deploy DOCKER_TAG=${CIRCLE_TAG}          
  helm_push:
    docker:
      - image: circleci/python:3.6
    environment:
      DESIRED_VERSION: "v2.9.1"
    steps:
      - checkout
      - run:
          name: Install Helm
          command: |
            curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get | bash
      - run:
          name: Push to S3
          command: hack/helm/push
workflows:
  version: 2
  # runs on all commits
  build_and_test:
    jobs:
      - build
      - unit_test
      - markdownlint
  test_build_deploy:
    jobs:
      - unit_test:
          filters:
            tags:
              only:
                - /^[0-9]+.[0-9]+.[0-9]+$/
                - /^[0-9]+.[0-9]+.[0-9]+-rc[0-9]+$/
            branches:
              ignore: /.*/
      - build_deploy:
          filters:
            tags:
              only:
                - /^[0-9]+.[0-9]+.[0-9]+$/
                - /^[0-9]+.[0-9]+.[0-9]+-rc[0-9]+$/
            branches:
              ignore: /.*/
      - helm_push:
          requires:
            - build_deploy
          filters:
            tags:
              only:
                - /^[0-9]+.[0-9]+.[0-9]+$/
                - /^[0-9]+.[0-9]+.[0-9]+-rc[0-9]+$/
            branches:
              ignore: /.*/
